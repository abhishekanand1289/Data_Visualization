# -*- coding: utf-8 -*-
"""task-26.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16bujo0m_ufU_e2ONLnVKyR7BnhOwHvkd
"""

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns

plt.style.use("ggplot")

"""###`Q 1-3` Using the 'diamonds' dataset - sns.load_dataset('diamonds')
1. Create a violinplot of 'price' grouped by 'cut'.
2. Create regplot on `carat` vs `price`. and give hue on 'cut'
3. Create boxplot on 'color' and 'price'
"""

df = sns.load_dataset('diamonds')

sns.violinplot(data =df , x='cut', y='price')

#Create regplot on carat vs price. and give hue on 'cut'
sns.lmplot(df, x='carat', y='price', hue='cut')

sns.boxplot(data=df, x='color', y='price')

"""###`Q 4` Using the 'Taxis' dataset - sns.load_dataset('taxis')
4.1. Create a categorical estimate plot of the totl fare - 'total' for each payment type - 'payment'.

4.2. Create a regression plot on time of ride  vs total fare. You will need to calculate ride time using pickup and dropoff column.

4.3 Give hue on payment type. and Another plot hue on taxi 'color'. Observe the plot.
"""

df = sns.load_dataset('taxis')

#Create a categorical estimate plot of the totl fare - 'total' for each payment type - 'payment'.

sns.pointplot(data=df, x='payment', y='total', errorbar=None)

#Create a regression plot on time of ride vs total fare. You will need to calculate ride time using pickup and dropoff column.
sns.lmplot(data=df, x='ride', y='total', hue='payment')

df['ride'] = df['dropoff'] - df['pickup']

df['ride'] = round(df['ride'].dt.seconds/60, 2)

#Give hue on payment type. and Another plot hue on taxi 'color'. Observe the plot.
sns.lmplot(data=df, x='ride', y='total', hue='color')

"""## Problem 5-12:

### **`Problem 5:`** Draw a strip plot and swarm plot between "gender" and "bloodpressure" w.r.t "smoker" (use as hue parameter). Also add title to the charts.
"""

df = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vQVpcVtdYdZU4zU4-lqxt-iPHkyndDWs_aqEDUu9ZodlJ48Dku0PFgdXlj2N5RCmwXJrNtZLsI_wEVf/pub?gid=220677750&single=true&output=csv')

sns.catplot(data=df,x='gender', y='bloodpressure', hue='smoker')
plt.title('gender vs bloodpressure')
plt.show()

sns.catplot(data=df,x='gender', y='bloodpressure', hue='smoker', kind='swarm')
plt.title('gender vs bloodpressure')
plt.show()

"""### **`Problem 6:`** Draw a Box-plot and a Violin plot of which x-axis represents the "region" and the y-axis represents the "bmi". Also add extra information of the column "diabetic"."""

sns.catplot(data=df, x='region', y='bmi', kind='box', col='diabetic')

sns.catplot(data=df, x='region', y='bmi', kind='violin', col='diabetic')

"""### **`Problem  7:`** Draw a bar plot and point plot of which x-axis represents the "gender" and y-axis represents "claim". Also add extra information about "smoker" column."""

sns.catplot(data=df, x='gender', y='claim', kind='bar', col='smoker', errorbar=None)

sns.catplot(data=df, x='gender', y='claim', kind='point', col='smoker', errorbar=None)

"""### **`Problem 8:`** Draw a reg plot between "age" and "bmi" columns."""

sns.lmplot(data=df, x='age', y='bmi', hue='gender')

"""### **`Problem 9:`** Draw a pair plot of the insurance data. Use "gender" as hue parameter."""

df.columns

sns.pairplot(data=df[['age', 'gender', 'bmi', 'bloodpressure',
       'children', 'claim']], hue='gender')

"""### **`Problem 10:`** Draw a pair grid of the insurance data and use "diabetic" column as a hue parameter. Also, make the diagonal plots as box-plot, upper parts as scatter plot and the lower parts as kde plot."""

df.columns

g = sns.PairGrid(data=df[['age', 'gender', 'bmi', 'bloodpressure',
       'children', 'claim', 'diabetic']], hue='diabetic')
g.map_diag(sns.boxplot)
g.map_upper(sns.scatterplot)
g.map_lower(sns.kdeplot)

"""### **`Prolem 11:`** Draw a joint plot as scatter between "bloodpressure" and "bmi". Use "smoker" as hue parameter."""

sns.jointplot(data=df, x='bloodpressure', y='bmi', hue='smoker')

"""### **`Problem 12:`** Draw a joint grid of which x-axis represents "age" and y-axis represents "claim". Draw"""

g = sns.JointGrid(data=df, x='age', y='claim')
g.plot(sns.boxplot, sns.histplot)

