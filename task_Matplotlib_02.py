# -*- coding: utf-8 -*-
"""Copy of task-24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Aw0ZD6RvLXBIM5JIJlp5EBovwvKcuugq
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.preprocessing import LabelEncoder

plt.style.use('default')

"""## **Problem 1 to 2:**

**Dataset link:** https://rb.gy/gsmddu

**Add a label to every axis and add a proper title for the charts (For every subplot, it is applicable). Also add proper labels if there are multiple representations.** Then, you can customize it as your wish.

### **Problem-1:** Make a subplots which have 2 plots.

- For the first chart, draw a scatter plot "*Monitored Cap.(MW)*" vs "*Total Cap. Under Maintenance (MW)*" of top 5 most frequent power stations. Then draw the lines which indicate the average values of these two columns. Change the colors according to the names of the Power Stations.
- For the second chart, draw a scatter plot "*Monitored Cap. (MW)*" vs "*Actual(MU)*" of the top 5 most frequent power stations. Also draw the lines which indicates the average values of these two columns. Change the colors according to the names of the Power Stations.
"""

df = pd.read_csv('https://rb.gy/gsmddu')

df['Power Station'].value_counts().head().index

plot = df[df['Power Station'].isin(['NTPC Ltd.', 'NHPC', 'NPCIL', 'GMR ENERG', 'JSWEL'])]

encoder = LabelEncoder()
plot['Power Station'] = encoder.fit_transform(plot['Power Station'])

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(12,5))
ax[0].scatter(plot['Monitored Cap.(MW)'], plot['Total Cap. Under Maintenace (MW)'], c=plot['Power Station'])
ax[0].axhline(plot['Total Cap. Under Maintenace (MW)'].mean(), c='Red')
ax[0].axvline(plot['Monitored Cap.(MW)'].mean(), c='Red')
ax[1].scatter(plot['Monitored Cap.(MW)'], plot['Actual(MU)'], c=plot['Power Station'])
ax[1].axhline(plot['Actual(MU)'].mean(), c='Red')
ax[1].axvline(plot['Monitored Cap.(MW)'].mean(), c='Red')

"""### **Problem-2:** Draw a 3D Scatter plot between "*Monitored Cap.(MW)*", "*Total Cap. Under Maintenace (MW)*" and "*Forced Maintanence(MW)*"
"""

fig = plt.figure()
ax = plt.subplot(projection='3d')
ax.scatter3D(df['Monitored Cap.(MW)'],df['Total Cap. Under Maintenace (MW)'],df['Forced Maintanence(MW)'])

"""### **Problem-3:** Make a 3D *Surface* plot of this below mathematical equation.

$$z = |x| - |y|$$
"""

x = np.linspace(-10,10,100)
y = np.linspace(10,20,100)
xx, yy = np.meshgrid(x,y)
z = np.abs(xx) - np.abs(yy)

fig = plt.figure()
ax = plt.subplot(projection='3d')

ax.plot_surface(xx,yy,z, cmap='viridis')

"""### **Problem-4:** Draw the 3D *Contour plot* of this below equation:

$$z = |x| - |y|$$
"""

fig = plt.figure()

ax = plt.subplot()

ax.contour(xx,yy,z)

"""### **Problem-5:** Draw a second type of Countour plot of the below equation:

$$z = |x| - |y|$$
"""

fig = plt.figure()

ax = plt.subplot()
ax.contourf(xx,yy,z)

"""## `Problem 6-7`

Data Set Link - https://docs.google.com/spreadsheets/d/17tUL2yC7MGvo7txuuhLtAI-b6_C4jc0t7FLFxqRm-uI/edit?usp=share_link


**Description of Dataset:**

* Date: It gives the date of which stocks details are given.
* Symbol: Name of stock
* Open: It gives the opening price of stock on that date.
* High: It gives the highest price to which the stock ascened on that day.
* Low: It gives the highest price to which the stock plummeted on that day.
* Close: It gives the closing price of stock on that date.
* Volume: It gives the amount of stock traded on that date.
* VWAP: The volume-weighted average price (VWAP) is a statistic used by traders to determine what the average price is based on both price and volume.
* Turnover:
"""

df =pd.read_csv('/content/nifty-50 - nifty-50.csv')
df.head()

"""### `Problem-6` Use Pandas plot functions

* Line plot of closing value of top 5 Stocks in Year 2020.
* Take top 5 stocks based on total turnover in Year 2020
"""

df['Date'] = pd.to_datetime(df['Date'])

df['year'] = df['Date'].dt.year

temp = df[df['year']==2020]

stocks = temp.groupby('Symbol')['Turnover'].sum().sort_values(ascending=False).head().index

temp['Symbol'].isin

ax = temp[temp.Symbol=='RELIANCE'].plot(y='Close', use_index=True)
for company in stocks[1:]:
    temp[temp.Symbol==company].plot(y='Close', label=company, use_index=True, ax=ax)

"""### `Problem-7` Scatter plot Close price vs Volume for TOP-5 Stocks in year 2021
* Color on Symbol Column
"""

data = df[df['year']==2021]

top_5 = data.groupby('Symbol')['Turnover'].sum().sort_values(ascending=False).head().index

temp = data[data['Symbol'].isin(top_5)]

temp['Symbol'] = temp['Symbol'].astype('category')

temp.plot(kind='scatter',x = 'Close', y='Volume', c='Symbol', cmap='viridis')

"""### `Problem-8` Create a 3-D Scatter Plot using `time,x,y` on below synthetic data. and give color gradiant on `z`
```
# Create a 3D dataset
time = np.linspace(0, 10, 100)
x = np.sin(time)
y = np.cos(time)
z = time

# Create a DataFrame from the dataset
data = pd.DataFrame({'time': time, 'x': x, 'y': y, 'z': z})
```
"""

time = np.linspace(0, 10, 100)
x = np.sin(time)
y = np.cos(time)

z = time

fig = plt.figure()
ax = plt.subplot(projection='3d')
ax.scatter3D(time,x,y, c=z)

"""### `Problem 9:` Create a surface plot and the 2 types of the contour plots of the below equation.

$$z = sin(\sqrt{x^2 + y^2})$$

"""

x = np.linspace(-10,10,100)
y = np.linspace(-10,10,100)

xx,yy = np.meshgrid(x,y)

z=np.sin(np.sqrt(xx**2+yy**2))

fig = plt.figure()
ax = plt.subplot(projection='3d')

ax.plot_surface(xx,yy,z)

fig = plt.figure()
ax = plt.subplot()

ax.contour(xx,yy,z)

fig = plt.figure()
ax = plt.subplot()

ax.contourf(xx,yy,z)

"""### `Problem 10:` Create a surface plot and the 2 types of the contour plots of the below equation.

$$z = tan(\log_2({x^2 + y^2})$$
"""

x = np.linspace(-10,10,100)
y = np.linspace(-10,10,100)

xx,yy = np.meshgrid(x,y)

z = np.tan(np.log2(xx**2+yy**2))

fig = plt.figure()
ax = plt.subplot(projection='3d')

ax.plot_surface(xx,yy,z)

fig = plt.figure()
ax = plt.subplot()

ax.contour(xx,yy,z)

fig = plt.figure()
ax = plt.subplot()

ax.contourf(xx,yy,z)

